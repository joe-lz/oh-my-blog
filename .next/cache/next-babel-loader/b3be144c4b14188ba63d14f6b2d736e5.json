{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Head from \"next/head\";\nimport Link from \"next/link\";\nimport AV from \"leancloud-storage\";\nimport dayjs from \"dayjs\";\nimport { useRouter } from \"next/router\";\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button, Checkbox, Spin, Alert, notification, Modal, message } from \"antd\";\nimport ReactCardFlip from \"react-card-flip\";\nimport styles from \"./index.module.scss\";\nconst layout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 18\n  }\n};\nconst tailLayout = {\n  // wrapperCol: { offset: 5, span: 19 },\n  wrapperCol: {\n    offset: 0,\n    span: 24\n  }\n};\n\nfunction Components(props) {\n  const {\n    0: isFlipped,\n    1: setisFlipped\n  } = useState(false);\n  const {\n    0: modalShow,\n    1: setmodalShow\n  } = useState(false);\n  const {\n    0: isSpin,\n    1: setisSpin\n  } = useState(false); // const [username, setusername] = useState(\"\");\n  // const [password, setpassword] = useState(\"\");\n  // const [repassword, setrepassword] = useState(\"\");\n\n  const onLoginFinish = values => {\n    console.log(\"Success:\", values);\n    handleLogin(values);\n  };\n\n  const onLoginFinishFailed = errorInfo => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const onRegisterFinish = values => {\n    console.log(\"Success:\", values);\n    handleRegister(values);\n  };\n\n  const onRegisterFinishFailed = errorInfo => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const handleLogin = ({\n    username,\n    password\n  }) => {\n    if (username && password) {\n      setisSpin(true);\n      AV.User.logIn(username, password).then(user => {\n        // 登录成功\n        setisSpin(false);\n        message.success(\"登录成功\");\n        setTimeout(() => {\n          window.location.reload();\n        }, 1000);\n      }, error => {\n        // 登录失败（可能是密码错误）\n        setisSpin(false);\n        notification.error({\n          message: \"登录失败\",\n          description: leanerrors[error.code] ? leanerrors[error.code].msg : \"\"\n        });\n      });\n    } else {\n      notification.error({\n        message: \"登录失败\",\n        description: \"请输入用户名、密码\"\n      });\n    }\n  };\n\n  const handleRegister = ({\n    username,\n    password\n  }) => {\n    setisSpin(true);\n    const user = new AV.User();\n    user.setUsername(username);\n    user.setPassword(password);\n    user.signUp().then(user => {\n      // 注册成功\n      setisSpin(false);\n      message.success(\"注册成功\");\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    }, error => {\n      // 注册失败（通常是因为用户名已被使用）\n      setisSpin(false);\n      notification.error({\n        message: \"注册失败\",\n        description: leanerrors[error.code] ? leanerrors[error.code].msg : \"\"\n      });\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: styles.btn,\n    onClick: () => {\n      setmodalShow(true);\n    }\n  }, props.children), __jsx(Modal, {\n    title: isFlipped ? \"注册\" : \"登录\",\n    width: 450,\n    visible: modalShow,\n    onCancel: () => {\n      setmodalShow(false);\n    } // onOk={() => {}}\n    // okText=\"保存\"\n    // cancelText=\"取消\"\n    ,\n    bodyStyle: {\n      padding: 0\n    },\n    footer: null\n  }, __jsx(\"div\", {\n    className: styles.login\n  }, __jsx(Spin, {\n    spinning: isSpin,\n    tip: \"\\u52A0\\u8F7D\\u4E2D...\"\n  }, __jsx(ReactCardFlip, {\n    isFlipped: isFlipped,\n    flipDirection: \"horizontal\"\n  }, __jsx(Form, _extends({}, layout, {\n    name: \"\\u767B\\u5F55\",\n    initialValues: {\n      remember: true\n    },\n    onFinish: onLoginFinish,\n    onFinishFailed: onLoginFinishFailed\n  }), __jsx(Form.Item, {\n    label: \"\\u7528\\u6237\\u540D\",\n    name: \"username\",\n    rules: [{\n      required: true,\n      message: \"请输入用户名\"\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: \"\\u5BC6\\u7801\",\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: \"请输入密码\"\n    }]\n  }, __jsx(Input, {\n    type: \"password\"\n  })), __jsx(Form.Item, tailLayout, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: {\n      width: \"100%\"\n    }\n  }, \"\\u767B\\u5F55\")), __jsx(Form.Item, tailLayout, __jsx(Button, {\n    type: \"text\",\n    htmlType: \"submit\",\n    style: {\n      width: \"100%\"\n    },\n    onClick: () => {\n      setisFlipped(true);\n    }\n  }, \"\\u8FD8\\u6CA1\\u6709\\u8D26\\u6237\\uFF1F\", __jsx(\"a\", null, \"\\u7ACB\\u5373\\u6CE8\\u518C\")))), __jsx(Form, _extends({}, layout, {\n    name: \"\\u6CE8\\u518C\",\n    initialValues: {\n      remember: true\n    },\n    onFinish: onRegisterFinish,\n    onFinishFailed: onRegisterFinishFailed\n  }), __jsx(Form.Item, {\n    label: \"\\u7528\\u6237\\u540D\",\n    name: \"username\",\n    rules: [{\n      required: true,\n      message: \"请输入用户名\"\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: \"\\u5BC6\\u7801\",\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: \"请输入密码\"\n    }]\n  }, __jsx(Input, {\n    type: \"password\"\n  })), __jsx(Form.Item, {\n    label: \"\\u786E\\u8BA4\\u5BC6\\u7801\",\n    name: \"repassword\",\n    dependencies: [\"password\"],\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: \"请确认密码\"\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue(\"password\") === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(\"两次输入的密码不相同!\");\n      }\n\n    })]\n  }, __jsx(Input, {\n    type: \"password\"\n  })), __jsx(Form.Item, tailLayout, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: {\n      width: \"100%\"\n    }\n  }, \"\\u6CE8\\u518C\")), __jsx(Form.Item, tailLayout, __jsx(Button, {\n    type: \"text\",\n    htmlType: \"submit\",\n    style: {\n      width: \"100%\"\n    },\n    onClick: () => {\n      setisFlipped(false);\n    }\n  }, \"\\u5DF2\\u6709\\u8D26\\u6237\\uFF1F\", __jsx(\"a\", null, \"\\u7ACB\\u5373\\u767B\\u5F55\")))))))));\n}\n\nexport default Components;","map":null,"metadata":{},"sourceType":"module"}