{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from \"next/head\";\nimport AV from \"leancloud-storage\";\nimport dynamic from \"next/dynamic\";\nimport React, { useState, useEffect } from \"react\";\nimport { Tree, Button, notification, Input, Modal, TreeSelect } from \"antd\";\nimport { PictureOutlined } from \"@ant-design/icons\";\nimport { useRouter } from \"next/router\";\nimport marked from \"marked\";\nimport hljs from \"highlight.js\";\nlet CodeMirror = null;\n\nif (false && typeof window.navigator !== \"undefined\") {\n  const {\n    UnControlled\n  } = require(\"react-codemirror2\");\n\n  CodeMirror = UnControlled;\n\n  require(\"codemirror/mode/javascript/javascript\"); // require('codemirror/mode/markdown/markdown')\n\n}\n\nimport styles from \"./index.module.scss\";\nimport Layout from \"src/components/admin/Layout\";\nimport Upload from \"src/components/admin/Upload\";\nimport { getMenusList } from \"src/service/menu\";\nimport { getArticleById, updateArticle } from \"src/service/article\";\nconst {\n  TextArea\n} = Input;\nconst renderer = new marked.Renderer();\nmarked.setOptions({\n  renderer,\n  highlight: function (code, language) {\n    const hljs = require(\"highlight.js\");\n\n    const validLanguage = hljs.getLanguage(language) ? language : \"plaintext\";\n    return hljs.highlight(validLanguage, code).value;\n  },\n  pedantic: false,\n  gfm: true,\n  breaks: false,\n  sanitize: false,\n  smartLists: true,\n  smartypants: false,\n  xhtml: false\n});\n\nfunction AdminHome() {\n  const router = useRouter();\n  const {\n    aid\n  } = router.query;\n  const {\n    0: modalShow,\n    1: setmodalShow\n  } = useState(false);\n  const {\n    0: articleItem,\n    1: setarticleItem\n  } = useState(null);\n  const {\n    0: menus,\n    1: setmenus\n  } = useState([]);\n  const {\n    0: category_1_key,\n    1: setcategory_1_key\n  } = useState(null);\n  const {\n    0: category_1_title,\n    1: setcategory_1_title\n  } = useState(null);\n  const {\n    0: category_2_key,\n    1: setcategory_2_key\n  } = useState(null);\n  const {\n    0: category_2_title,\n    1: setcategory_2_title\n  } = useState(null);\n  const {\n    0: articleTitle,\n    1: setarticleTitle\n  } = useState(\"\");\n  const {\n    0: articleVal,\n    1: setarticleVal\n  } = useState(`\nMarked - Markdown Parser\n========================\n\n[Marked] lets you convert [Markdown] into HTML.  Markdown is a simple text format whose goal is to be very easy to read and write, even when not converted to HTML.  This demo page will let you type anything you like and see how it gets converted.  Live.  No more waiting around.\n\nHow To Use The Demo\n-------------------\n\n1. Type in stuff on the left.\n2. See the live updates on the right.\n\nThat's it.  Pretty simple.  There's also a drop-down option in the upper right to switch between various views:\n\n- **Preview:**  A live display of the generated HTML as it would render in a browser.\n- **HTML Source:**  The generated HTML before your browser makes it pretty.\n- **Lexer Data:**  What [marked] uses internally, in case you like gory stuff like this.\n- **Quick Reference:**  A brief run-down of how to format things using markdown.\n\nWhy Markdown?\n-------------\n\nIt's easy.  It's not overly bloated, unlike HTML.  Also, as the creator of [markdown] says,\n\n> The overriding design goal for Markdown's\n> formatting syntax is to make it as readable\n> as possible. The idea is that a\n> Markdown-formatted document should be\n> publishable as-is, as plain text, without\n> looking like it's been marked up with tags\n> or formatting instructions.\n\nReady to start writing?  Either start changing stuff on the left or\n[clear everything](/demo/?text=) with a simple click.\n\n[Marked]: https://github.com/markedjs/marked/\n[Markdown]: http://daringfireball.net/projects/markdown/\n`);\n\n  const handleGetMenu = async () => {\n    // 获取菜单\n    const res = await getMenusList();\n    setmenus(res.toJSON().value);\n  };\n\n  const onCategoryChange = selectKey => {\n    let category_1_key = null;\n    let category_1_title = null;\n    let category_2_key = null;\n    let category_2_title = null;\n    menus.map(obj1 => {\n      if (obj1.key === selectKey) {\n        category_1_key = obj1.key;\n        category_1_title = obj1.title;\n      }\n\n      if (obj1.children) {\n        obj1.children.map(obj2 => {\n          if (obj2.key === selectKey) {\n            category_1_key = obj1.key;\n            category_1_title = obj1.title;\n            category_2_key = obj2.key;\n            category_2_title = obj2.title;\n          }\n\n          return obj2;\n        });\n      }\n\n      return obj1;\n    });\n    setcategory_1_key(category_1_key);\n    setcategory_1_title(category_1_title);\n    setcategory_2_key(category_2_key);\n    setcategory_2_title(category_2_title);\n  };\n\n  const handleUpdate = async (params = {}) => {\n    await updateArticle({\n      articleItem,\n      params: _objectSpread({\n        articleVal,\n        title: articleTitle,\n        category_1_key,\n        category_1_title,\n        category_2_key,\n        category_2_title\n      }, params)\n    });\n    notification.success({\n      message: \"保存成功\" // description: \"请输入用户名、密码\",\n\n    });\n  };\n\n  useEffect(() => {\n    handleGetMenu();\n  }, []);\n  useEffect(() => {\n    if (router && router.query) {\n      if (aid) {\n        async function fetchData() {\n          // 获取文章\n          const res = await getArticleById({\n            id: aid\n          });\n          const articleItem = res.toJSON();\n          setcategory_1_key(articleItem.category_1_key);\n          setcategory_1_title(articleItem.category_1_title);\n          setcategory_2_key(articleItem.category_2_key);\n          setcategory_2_title(articleItem.category_2_title);\n\n          try {\n            setarticleItem(res);\n            setarticleTitle(articleItem.title);\n          } catch (error) {\n            console.log(error);\n          }\n\n          if (articleItem.articleVal) {\n            setarticleVal(articleItem.articleVal);\n          }\n        }\n\n        fetchData();\n      }\n    }\n  }, [router]);\n  return __jsx(Layout, {\n    hideSidebar: true,\n    bodyStyle: {\n      paddingBottom: 0\n    }\n  }, articleItem && __jsx(\"div\", {\n    className: styles.articles_detail\n  }, __jsx(\"div\", {\n    className: styles.articles_detail_title\n  }, __jsx(\"div\", {\n    className: styles.articles_detail_title_body\n  }, __jsx(\"p\", {\n    className: styles.articles_detail_title_label\n  }, \"\\u6807\\u9898\\uFF1A\"), __jsx(\"input\", {\n    className: styles.articles_detail_title_input,\n    placeholder: \"\\u8BF7\\u8F93\\u5165\\u6587\\u7AE0\\u6807\\u9898\",\n    value: articleTitle,\n    onChange: e => {\n      setarticleTitle(e.target.value);\n    }\n  }), __jsx(\"div\", {\n    className: styles.articles_detail_operation\n  }, __jsx(\"div\", {\n    className: styles.articles_detail_operation_assets\n  }, __jsx(PictureOutlined, {\n    style: {\n      fontSize: 20\n    },\n    onClick: () => {\n      setmodalShow(true);\n    }\n  }), __jsx(Modal, {\n    width: 900,\n    visible: modalShow,\n    onCancel: () => {\n      setmodalShow(false);\n    },\n    onOk: () => {\n      handleCreate();\n    },\n    okText: \"\\u4FDD\\u5B58\",\n    cancelText: \"\\u53D6\\u6D88\",\n    bodyStyle: {\n      padding: 0\n    },\n    footer: null\n  }, modalShow && __jsx(Upload, null))), __jsx(\"div\", {\n    className: styles.articles_detail_operation_catagory\n  }, __jsx(TreeSelect, {\n    style: {\n      width: \"100%\"\n    },\n    value: category_2_key || category_1_key,\n    dropdownStyle: {\n      maxHeight: 400,\n      overflow: \"auto\"\n    },\n    treeData: menus,\n    placeholder: \"\\u8BF7\\u9009\\u62E9\\u5206\\u7C7B\",\n    treeDefaultExpandAll: true,\n    onChange: catgory_key => {\n      onCategoryChange(catgory_key);\n    }\n  })), __jsx(Button, {\n    type: \"primary\",\n    size: \"large\",\n    shape: \"round\",\n    onClick: async () => {\n      await handleUpdate();\n    }\n  }, \"\\u4FDD\\u5B58\"), __jsx(Button, {\n    type: \"primary\",\n    size: \"large\",\n    shape: \"round\",\n    danger: true,\n    onClick: async () => {\n      await handleUpdate({\n        status: 3\n      });\n    }\n  }, \"\\u4FDD\\u5B58\\u5E76\\u4E0A\\u7EBF\")))), __jsx(\"div\", {\n    className: styles.articles_detail_body\n  }, __jsx(\"div\", {\n    className: styles.articles_detail_left\n  }, CodeMirror && __jsx(CodeMirror, {\n    value: articleVal,\n    options: {\n      mode: \"javascript\",\n      theme: \"github-light\",\n      lineNumbers: true\n    },\n    onChange: (editor, data, value) => {\n      setarticleVal(value);\n    }\n  })), __jsx(\"div\", {\n    className: styles.articles_detail_right\n  }, __jsx(\"article\", {\n    className: \"markdown-body\",\n    dangerouslySetInnerHTML: {\n      __html: marked(articleVal)\n    }\n  })))));\n}\n\nexport default AdminHome;","map":null,"metadata":{},"sourceType":"module"}